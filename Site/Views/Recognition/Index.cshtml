<form id="frmCapturar" class="needs-validation" method="post" novalidate>
    <div class="d-grid gap-2 d-md-flex justify-content-md-center">
        <div class="mt-5 w-50">
            <div class="shadow p-3 mb-5 bg-light rounded">
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="face-container">
                            <div class="oval"></div>
                            <video id="videoElement" autoplay class="w-100"></video>
                            <canvas id="overlayCanvas" class="custom-canvas w-100"></canvas>
                        </div>
                    </div>
                </div>
                <div id="divMessage" class="d-grid gap-2 d-md-flex justify-content-md-center">
                    <p class="fw-bold text-danger">Aproxime seu rosto da câmera para o reconhecimento facial</p>
                </div>
                <div class="progress mb-2">
                    <div id="pbar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                </div>
                <div id="divCapture" class="d-grid gap-2 d-md-flex justify-content-md-end visually-hidden">
                    <button id="btnCapture" class="btn btn-primary">
                        <i class="bi bi-camera"></i> Iniciar Captura
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>

<div id="ResultCompareFaces"></div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/face-api/dist/face-api.min.js"></script>

    <script type="module">
        $(document).ready(async function () {
            const detectionOptions = new faceapi.TinyFaceDetectorOptions();
            const video = document.getElementById('videoElement');
            const overlayCanvas = document.getElementById('overlayCanvas');
            let captureActive = true;
            const scale = 1.5;

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    video.srcObject = stream;
                })
                .catch(error => {
                    ShowAlert('Erro ao acessar a câmera: ', error);
                });

            Promise.all([
                faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
                faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
                faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
                faceapi.nets.faceExpressionNet.loadFromUri('/models')
            ]).then(await startFaceDetection);

            async function startFaceDetection() {
                const intervalId = setInterval(async () => {
                    faceapi.matchDimensions(overlayCanvas, video, true);

                    const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
                        .withFaceLandmarks();

                    const context = overlayCanvas.getContext('2d');
                    context.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);

                    if (detections.length > 0) {
                        const faceRect = detections[0].detection.box;

                        //RectangleOverFace(context, faceRect, scale);
                        //ExpressionLines(context, detections);

                        if (checkFaceApproach(faceRect)) {
                            clearInterval(intervalId);
                            captureImage();
                        }
                    }
                }, 100);
            }

            function checkFaceApproach(faceRect) {
                if (!captureActive) return false;

                const referenceSize = 290;
                const faceSize = Math.max(faceRect.width, faceRect.height);
                let percent = Math.round((faceSize * 100) / referenceSize);
                percent = percent > 100 ? 100 : percent;
                drawProgressBar(percent);

                if (faceSize > referenceSize) return true;

                return false;
            }

            function drawProgressBar(percent) {
                const progressBar = document.getElementById("pbar");
                progressBar.style = `width: ${percent}%`;
                progressBar.setAttribute("aria-valuenow", percent);
                progressBar.innerHTML = percent + "%";
            }

            function captureImage() {
                if (!captureActive) return;

                $('#divAguarde').show();
                video.pause();
                captureActive = false;

                Promise.all([
                    faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
                    faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
                    faceapi.nets.faceRecognitionNet.loadFromUri('/models')
                ]).then(async () => {
                    const detections = await faceapi.detectSingleFace(video, detectionOptions).withFaceLandmarks().withFaceDescriptor();

                    if (detections) {
                        const faceRect = detections.detection.box;

                        const enlargedWidth = faceRect.width * scale;
                        const enlargedHeight = faceRect.height * scale;
                        const enlargedX = faceRect.x - (enlargedWidth - faceRect.width) / 2;
                        const enlargedY = (faceRect.y - (enlargedHeight - faceRect.height) / 2) - 40;

                        const canvas = document.createElement('canvas');
                        canvas.width = enlargedWidth;
                        canvas.height = enlargedHeight;

                        const context = canvas.getContext('2d');
                        context.drawImage(video, enlargedX, enlargedY, enlargedWidth, enlargedHeight, 0, 0, canvas.width, canvas.height);

                        const dataUrl = canvas.toDataURL('image/png');

                        $.ajax({
                            url: '@Url.Action("Capture", "Recognition")',
                            cache: false,
                            type: 'post',
                            datatype: 'json',
                            data: { photoCapture: dataUrl },
                            success: function (result) {
                                $('#divAguarde').hide();
                                $("#ResultCompareFaces").html(result.html);

                                var _offcanvas = document.getElementById('offcanvasCompareFaces');
                                var _bsOffcanvas = new bootstrap.Offcanvas(_offcanvas);
                                _bsOffcanvas.show();

                                _offcanvas.addEventListener('hidden.bs.offcanvas', function () {
                                    video.play();
                                    startFaceDetection();
                                    $('#divCapture').removeClass('visually-hidden');
                                    $('#divMessage').addClass('visually-hidden');
                                });
                            }
                        });
                    } else {
                        $('#divAguarde').hide();
                        video.play();
                        startFaceDetection();
                        $('#divCapture').removeClass('visually-hidden');
                        $('#divMessage').addClass('visually-hidden');
                        ShowAlert('Não foi possível detectar o seu rosto, tente novamente!');
                    }
                });
            }

            $(document).on('click', '#btnCapture', function (e) {
                e.preventDefault();
                e.stopPropagation();
                $('#divCapture').addClass('visually-hidden');
                $('#divMessage').removeClass('visually-hidden');
                drawProgressBar(0);
                captureActive = true;
            });
        });
    </script>
}
